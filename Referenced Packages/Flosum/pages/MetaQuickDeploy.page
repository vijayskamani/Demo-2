<apex:page standardController="Flosum__Metadata_Log__c" extensions="Flosum.MetaQuickDeployExtension" action="{!setUpAuthentication}" sidebar="false">
<c:TrackPanel />
<apex:includeScript value="{!URLFOR($Resource.Flosum__jsforce)}"/> 
<script type="text/javascript" async="" src="{!URLFOR($Resource.zipp,'res/ga.js')}"></script>
<script type="text/javascript" src="{!URLFOR($Resource.zipp,'res/js/zip.js')}"></script>
<c:Wait />
	<apex:form >
		<apex:pagemessages id="msg"/>
		<apex:actionFunction name="redirectToLog" action="{!redirectToLog}" reRender="msg" onComplete="hide();">
			<apex:param assignTo="{!IsSuccessDeployment}" value="" name="deploymentFlag"/>
		</apex:actionFunction>
		<apex:actionFunction name="deployRecentValidation" action="{!deployRecentValidation}" reRender="msg" onComplete="checkDeploymentStatus('{!AsyncId}');">
		</apex:actionFunction>
		<apex:actionfunction action="{!showMessage}" reRender="msg" name="showMessage" onComplete="hide();">
			<apex:param assignTo="{!message}" value="" name="newstr"/>
		</apex:actionfunction>
		<apex:pageBlock >
			<apex:pageBlockButtons >
				<apex:commandButton value="Quick Deploy" action="{!startQuickDeploy}" rendered="{!If(authSuccesfull,true,false)}" styleClass="disableitem" onClick="show();" onComplete="quickdeployHandler('{!targetSession}','{!targetInstance}','{!targetReferesh}','{!logRecordId}');" reRender="msg"/>
			</apex:pageBlockButtons>
			<apex:pageBlockSection >
				<apex:outputField value="{!Flosum__Metadata_Log__c.Flosum__Organisation__c}"/>
				<apex:outputField value="{!Flosum__Metadata_Log__c.Flosum__Patch__c}"/>
				<apex:outputField value="{!Flosum__Metadata_Log__c.Flosum__Process_Type__c}"/>
				
				<apex:outputField value="{!Flosum__Metadata_Log__c.Flosum__Run_Test_Param__c}"/>
				<apex:outputField value="{!Flosum__Metadata_Log__c.Flosum__Succeed__c}"/>
			</apex:pageBlockSection>
		</apex:pageBlock>
	</apex:form>
	<script>
		zip.workerScriptsPath = "{!URLFOR($Resource.zipp,'res/js/workers')}/";
        var zipFileEntry, zipWriter, writer, creationMethod, URL = window.webkitURL || window.mozURL || window.URL;
        var apiVersion = {!localApiVersion};
		var flosumsf = jsforce;
		var sourceSession;
		var sourceInstance;
		var sourceRefereshToken;
		var deployAsyncId;
		var conn1;
		var deploymentLogId;
		var successDeployment;
		var IsNullResponseError;
		
		var UnknownErrorInDeploy = [];
     	var successItemMap = {};
    	var errorItemMap = {};
    	var runAllTestMap = {};
    	
    	var successLog = '';
	    var errorLog = '';
	    var runTestLog = '';
    
    	var createdSet = {};
    	var updatedSet = {};
    	var deletedSet = {};
    	
    	var ROLL_BACK_ZIP_DESCRIPTION = 'BACKUP ZIP';
		var ROLL_BACK_FILE_DESCRIPTION = 'Rollback';
		var ROLL_BACK_FILE_TYPE = 'application/zip';
		
		var backupObjectList = [];
		
		function quickdeployHandler(session,instance,refereshToken,LogId)
		{
			IsNullResponseError = false;
			successDeployment = false;
			UnknownErrorInDeploy = [];
     		successItemMap = {};
    		errorItemMap = {};
    		runAllTestMap = {};
    		
    		successLog = '';
	    	errorLog = '';
	    	runTestLog = '';
	    	
	    	createdSet = {};
    		updatedSet = {};
    		deletedSet = {};
		
			sourceSession = '';
			sourceInstance = '';
			sourceRefereshToken = '';
			if(LogId != undefined && LogId != null && LogId != '')
			{
				deploymentLogId = LogId;
				sourceSession = session;
				sourceInstance = instance;
				sourceRefereshToken = refereshToken;
				getBackUpInfo(LogId);
			}
			else
			{
				hide();
			}
		}
		
		function checkDeploymentStatus(AsyncId)
		{
			if(AsyncId != null && AsyncId != undefined && AsyncId != '')
			{
				deployAsyncId = AsyncId;
				conn1 = createConnection(sourceSession,sourceRefereshToken,sourceInstance);
				conn1.metadata.checkDeployStatus(AsyncId,true,deployDetail);
			}
			else
			{
				hide();
			}
		}
		
		function deployDetail(err, result)
		{
    		if(err)
            {
            	if(err != null && err != undefined && err.errorCode != undefined)
	           	{
	           		UnknownErrorInDeploy.push(err.errorCode);
	           	}
               	else
               	{
               		IsNullResponseError = true;
	           		UnknownErrorInDeploy.push('The metadata to be deployed was sent to the target Salesforce org. However, the target Salesforce org did not return any response.\nTo check the success of deployment, please login to the target Salesforce organization, and check the deployment status.');
               	}
               	//finish deployment and save logs.
		        finishDeployment();
       		}
            else
            {
            	if(result.done)
	        	{
	        		if(result.success)
	        		{
	        			successDeployment = true;
	        		}
	        		else
	        		{
	        			successDeployment = false;
	        		}
	        		if(result.details != undefined)
		            {
		            	if(result.details.runTestResult != undefined)
		            	{
		            		runTestLog ='No. of Test Run: '+result.details.runTestResult.numTestsRun +'  Failures: '+result.details.runTestResult.numFailures+' Total Time: '+result.details.runTestResult.totalTime+'\n\n';
		            		if(result.details.runTestResult.codeCoverageWarnings != undefined)
        					{
        						if(Array.isArray(result.details.runTestResult.codeCoverageWarnings))
		            			{
					        		for(var index in result.details.runTestResult.codeCoverageWarnings)
					        		{
					        			if(index < result.details.runTestResult.codeCoverageWarnings.length)
					        			{
					        				var warning = result.details.runTestResult.codeCoverageWarnings[index];
						        			var error = '\n Coverage Warning: ' + 
								                           '\n Message: '+warning.message;
									    	runAllTestMap[warning.name +''+new Date().getTime()]= error;
						                }
					        		}
				        		}
				        		else
				        		{
				        			var warning = result.details.runTestResult.codeCoverageWarnings;
				        			var error = '\n Coverage Warning: ' + 
						                           '\n Message: '+warning.message;
							    	runAllTestMap[warning.name +''+new Date().getTime()]= error;
				        		}
        					}
        					if(result.details.runTestResult.failures != undefined)
        					{
        						if(Array.isArray(result.details.runTestResult.failures))
		            			{
					        		for(var index in result.details.runTestResult.failures)
					        		{
					        			if(index < result.details.runTestResult.failures.length)
					        			{
					        				var rtf = result.details.runTestResult.failures[index];
						        			var error = '\n Component Fail name: '+rtf.name + 
			                           						'\n Message: '+rtf.message;
							                runAllTestMap[rtf.type_x+''+rtf.name]= error;
						                }
					        		}
				        		}
				        		else
				        		{
				        			var rtf = result.details.runTestResult.failures;
				        			var error = '\n Component Fail name: '+rtf.name + 
	                           						'\n Message: '+rtf.message;
					                runAllTestMap[rtf.type_x+''+rtf.name]= error;
				        		}
        					}
        					if(result.details.runTestResult.successes != undefined)
        					{
        						if(Array.isArray(result.details.runTestResult.successes))
		            			{
					        		for(var index in result.details.runTestResult.successes)
					        		{
					        			if(index < result.details.runTestResult.successes.length)
					        			{
					        				var rtf = result.details.runTestResult.successes[index];
						        			var scc = '\n Component Pass name: '+rtf.name + 
			                           				'\n Method Name: '+rtf.methodName;
							                runAllTestMap[scc.name+''+scc.methodName]= scc;
						                }
					        		}
				        		}
				        		else
				        		{
				        			var rtf = result.details.runTestResult.successes;
				        			var scc = '\n Component Pass name: '+rtf.name + 
	                           				'\n Method Name: '+rtf.methodName;
					                runAllTestMap[scc.name+''+scc.methodName]= scc;
				        		}
        					}	
		            	}
		            	if(result.details.componentFailures != undefined)
		            	{
		            		if(Array.isArray(result.details.componentFailures))
		            		{
			            		for(var index in result.details.componentFailures)
				        		{
				        			if(index < result.details.componentFailures.length)
				        			{
				        				var failureComp = result.details.componentFailures[index];
				        				var error = '\n File name: '+failureComp.fileName + 
							                            	', Component name: '+failureComp.fullName + 
							                                ' (Line: ' + failureComp.lineNumber + ': Column:' + failureComp.columnNumber + ') : ' + 
							                                '\n Message: '+failureComp.problem;
				        				errorItemMap[failureComp.componentType+':'+failureComp.fileName+''+failureComp.fullName] = error;
				        			}
				        		}
			        		}
			        		else
			        		{
			        			var failureComp = result.details.componentFailures;
			        			var error = '\n File name: '+failureComp.fileName + 
							                            	', Component name: '+failureComp.fullName + 
							                            	'\n Message: '+failureComp.problem;
			        			errorItemMap[failureComp.componentType+':'+failureComp.fileName+''+failureComp.fullName] = error;
			        		}
		            	}
		            	if(result.details.componentSuccesses != undefined && result.success)
		            	{
		            		if(Array.isArray(result.details.componentSuccesses))
		            		{
			            		for(var index in result.details.componentSuccesses)
				        		{
				        			if(index < result.details.componentSuccesses.length)
				        			{
				        				var successComp = result.details.componentSuccesses[index];
				        				if(successComp.fullName != 'package.xml')
				        				{
					        				var componentStatus = ( successComp.created == 'true' ? 'CREATED ' : successComp.changed == 'true' ? 'UPDATED ' : successComp.deleted == 'true' ? 'DELETED ' : ' N/A ');
											var successMessage = "";			
											if(componentStatus != ' N/A ')
						            		{
							                	successMessage = '\n Component '+successComp.fullName + ' is '+componentStatus;
							                	if(componentStatus == 'CREATED ')
									    			createdSet[successComp.componentType+':'+successComp.fullName] = successComp.componentType+':'+successComp.fullName;
									    		else if(componentStatus == 'UPDATED ')
									    			updatedSet[successComp.componentType+':'+successComp.fullName] = successComp.componentType+':'+successComp.fullName;
									    		else if(componentStatus == 'DELETED ')
									    			deletedSet[successComp.componentType+':'+successComp.fullName] = successComp.componentType+':'+successComp.fullName;  
						            		}
						            		else
						            		{
						            			//if item status in N/A.
						            			successMessage = '\n Component '+successComp.fullName + '  NO CHANGE';
						            		}
					        				successItemMap[successComp.componentType+':'+successComp.fileName+''+successComp.fullName] = successMessage;
				        				}
				        			}
				        		}
			        		}
			        		else
			        		{
			        			var successComp = result.details.componentSuccesses;
			        			var componentStatus = ( successComp.created == 'true' ? 'CREATED ' : successComp.changed == 'true' ? 'UPDATED ' : successComp.deleted == 'true' ? 'DELETED ' : ' N/A ');
			        			var successMessage = '\n Component '+successComp.fullName + ' is '+componentStatus;
			        			successItemMap[successComp.componentType+':'+successComp.fileName+''+successComp.fullName] = successMessage;
			        		}
		            	}
		            }
		            //finish deployment and save logs.
		            finishDeployment();
		        }
		        else
		        {
		        	setTimeout(checkDeploymentStatus(result.id), 10000);
		        	console.log('deployment not completed yet.');
		        }
            }
       	}
       	
       	//finish deployment and save logs.
       	function finishDeployment()
       	{
       		console.log('finishDeployment()');
	    	if(deploymentLogId != undefined && deploymentLogId != null)
	    	{
	    		//Success Log
	    		successLog += '\n---------- Success Log Begin ----------------\n';
	    		var tempMap = {};
		        for(var key in successItemMap)
		        {
		        	var successList = [];
		        	var temp = key.split(':');
		        	var mType = 'Unknown';
		        	if(temp.length > 0)
		        	{
		        		mType = temp[0];
		        	}
		        	if(tempMap[mType])
		        	{
		        		successList = tempMap[mType];
		        	}
		        	successList.push(successItemMap[key]);
		        	tempMap[mType] = successList;
		        }
		        //successItemMap = {};
		        for(var key in tempMap)
		        {
		        	successLog +=  '\n\n---------- Deployed '+key+' ----------------\n';
		        	var successList = tempMap[key];
		        	for(var index in successList)
		        	{
		        		if(index < successList.length)
			        		successLog += successList[index];
			        }
		        }
		        tempMap = {};
		        successLog += '\n\n---------- Success Log Finished ----------------\n';
	    		
	    		// Error Log
		        errorLog += '\n---------- Error Log Begin ----------------\n';
		        for(var index in UnknownErrorInDeploy)
		        {
		        	if(index < UnknownErrorInDeploy.length)
		        	{
		        		errorLog += UnknownErrorInDeploy[index];
		        		errorLog += '\n';
		        	}
		        }
		        tempMap = {};
		        for(var key in errorItemMap)
		        {
		        	var successList = [];
		        	var temp = key.split(':');
		        	var mType = 'Unknown';
		        	if(temp.length > 0)
		        	{
		        		mType = temp[0];
		        	}
		        	if(tempMap[mType])
		        	{
		        		successList = tempMap[mType];
		        	}
		        	successList.push(errorItemMap[key]);
		        	tempMap[mType] = successList;
		        }
		        //errorItemMap = {};
		        for(var key in tempMap)
		        {
		        	errorLog +=  '\n\n---------- Deployed '+key+' ----------------\n';
		        	var successList = tempMap[key];
		        	for(var index in successList)
		        	{
		        		if(index < successList.length)
			        		errorLog += successList[index];
			        }
		        }
		        tempMap = {};
		        errorLog += '\n---------- Error Log Finished ----------------\n';
	    		
	    		
	    		
	    		
	    		var attDMLList = [];
	    		attDMLList.push({ParentId: deploymentLogId,Name : 'Deployment Success Log',Body: stringToBase64Encode(successLog),ContentType : 'text/plain'});
		    	var IsRunTestEmpty=true;
		    	for(var key in runAllTestMap)
		    	{
		    		IsRunTestEmpty=false;
		    		break;
		    	}
		    	if(!IsRunTestEmpty)
		    	{
		    		//Run all test log
		    		var fulldetail = runTestLog;
		    		runTestLog = '\n---------- Run All Tests Log Begin ----------------\n';
		    		runTestLog += fulldetail;
	                for(var key in runAllTestMap)
	                {
	                	runTestLog +=  runAllTestMap[key];
	                	runTestLog += '\n';
	                }
	                runTestLog += '\n\n---------- Run All Tests Log Finished ----------------\n';
		    		attDMLList.push({ParentId: deploymentLogId,Name : 'Run All Tests Log',Body: stringToBase64Encode(runTestLog),ContentType : 'text/plain'});
		    	}
		    	attDMLList.push({ParentId: deploymentLogId,Name : 'Deployment Error Log',Body: stringToBase64Encode(errorLog),ContentType : 'text/plain'});
		    	
	    		//Roll back Info file.
	    		var wrap = new Object();
	    		wrap.createdSet = [];
               	wrap.updatedSet = [];
               	wrap.deletedSet = [];
               	wrap.message = '';
               	
	    		for(var key in createdSet)
	    		{
	    			wrap.createdSet.push(key);
	    		}
	    		for(var key in updatedSet)
	    		{
	    			wrap.updatedSet.push(key);
	    		}
	    		for(var key in deletedSet)
	    		{
	    			wrap.deletedSet.push(key);
	    		}
	    		if(IsNullResponseError)
               	{
               		wrap.message = 'The rollback was not created since Flosum did not receive a response on which components were altered. The older versions of the components are available in the backup.zip. The components altered in the target organization can be seen by the system administrator in the Setup Audit Trail.';
               	}
               	else if(wrap.createdSet.length == 0 && wrap.updatedSet.length == 0 && wrap.deletedSet.length == 0)
               	{
               		wrap.message = 'No components have changed, hence the rollback file is empty.';
               	}
	    		
	    		attDMLList.push({ParentId: deploymentLogId,Name : ROLL_BACK_FILE_DESCRIPTION,Body: stringToBase64Encode(JSON.stringify(wrap)),ContentType : 'text/plain',Description : ROLL_BACK_FILE_DESCRIPTION});
	    		var selfConn = new flosumsf.Connection({ accessToken: '{!$API.Session_Id}' });
	        	selfConn.sobject('Attachment').create(attDMLList,logSaveHandler);
	    	}
       	}
       	
       	function logSaveHandler(err, ret)
        {
        	if (err) 
           	{ 
           		showMessage(err.errorCode);
           	}
           	else
           	{
           		redirectToLog(successDeployment);
           	}
       	}
       	
       	//for backup
       	function getBackUpInfo(deployPatchId)
		{
			Visualforce.remoting.Manager.invokeAction(
						            '{!$RemoteAction.MetaQuickDeployExtension.collectBackupInfo}',
						            deployPatchId,
						            handleBackUpInfo   
						        );
		}
		
		function handleBackUpInfo(r,e)
		{
			if(e.status && r) 
		    {
		    	$(".messageText").text("Creating backup...");
	    		conn1 = createConnection(sourceSession,sourceRefereshToken,sourceInstance);
	    		var retrieveRequest = getRetrieveRequest(r);
	    		conn1.metadata.pollTimeout = 1200000;
	    		conn1.metadata.retrieve(retrieveRequest,retrieveDetail);
		    }
		    else
		    {
		    	UnknownErrorInDeploy.push('Error while getting backup of target org :'+e.message);
				finishDeployment();
		    }
		}
		
		function retrieveDetail(err, result)
        {
			if(err) 
            { 
               	if(err != null && err != undefined && err.errorCode != undefined)
	           	{
               		UnknownErrorInDeploy.push(err.errorCode);
               		finishDeployment();
               	}
               	else
               	{
               		UnknownErrorInDeploy.push('A request was sent to Salesforce to retrieve the prior version of the files before deployment. However, Salesforce did not return any response. Flosum was not able to create a rollback.');
               		startDeployment();
               	}
			}
            else
            {
               	if(result != undefined && result.id != undefined)
               	{
               		var AsyncId = result.id;
               		var remainingTime = 10;
        			var timeCounter = function(){
        				if(remainingTime > 0)
        				{
							$(".messageText").text("Backup Retrieval status check is scheduled after "+remainingTime+" seconds.");
                            setTimeout(timeCounter, 1000);
                            remainingTime--;
        				}
        				else
        				{
        					checkRetrieveStatus(AsyncId);
        				}
        			}
        			timeCounter();
               	}
            }
        }
        
        function checkRetrieveStatus(AsyncId)
        {
        	conn1.metadata.pollTimeout = 1200000;
        	conn1.metadata.checkRetrieveStatus(AsyncId,checkRetrieveStatusDetail);
        }
        
        function checkRetrieveStatusDetail(err, result)
        {
        	if(err) 
            {
            	if(err != null && err != undefined && err.errorCode != undefined)
	           	{
	            	UnknownErrorInDeploy.push(err.errorCode);
	            	finishDeployment();
               	}
               	else
               	{
               		UnknownErrorInDeploy.push('A request was sent to Salesforce to retrieve the prior version of the files before deployment. However, Salesforce did not return any response. Flosum was not able to create a rollback.');
               		startDeployment();
               	}
			}
            else
            {
            	if(result != undefined && result.id != undefined)
               	{
               		if(result.done == 'true')
               		{
						// Errors?
						if(result.status == 'Succeeded')
						{
							if(result.zipFile != undefined )
							{
								if(result.zipFile.length < 3000000)
								{
									saveBackupZip(deploymentLogId,ROLL_BACK_ZIP_DESCRIPTION,ROLL_BACK_ZIP_DESCRIPTION,result.zipFile,ROLL_BACK_FILE_TYPE);
								}
								else
								{
									backupObjectList = [];
									zip.createReader(new zip.Data64URIReader(result.zipFile), function(reader) {
											var EntryIndex = 0;
											// get all entries from the zip
											reader.getEntries(function(entries) {
												if(entries.length)
												{
													var bodySize = 0;
													var fileLi = [];
													var readSingleFile = function(){
														if (EntryIndex < entries.length) 
														{
															var singleEntry = entries[EntryIndex];
															var fileName = singleEntry.filename;
															entries[EntryIndex].getData(new zip.BlobWriter(), function(blobData) {
																if(bodySize + blobData.size > 2000000 && fileLi.length > 0)
																{
																	var addIndex = 0;
																	function nextFile() 
																	{
																		var file = fileLi[addIndex];
																			zipWriter.add(file.name, new zip.BlobReader(file.data), function() {
																			addIndex++;
																			if(addIndex < fileLi.length)
																				nextFile();
																			else
																			{
																				zipWriter.close(function(base64Data) {
																    					base64Data = base64Data.slice(base64Data.indexOf(';base64,') + 8);
																    					bodySize = 0;
																						fileLi = [];
																						backupObjectList.push({ParentId: deploymentLogId,Name : ROLL_BACK_ZIP_DESCRIPTION,Description:ROLL_BACK_ZIP_DESCRIPTION,Body:base64Data,ContentType : ROLL_BACK_FILE_TYPE});	
																							
																						var fileInfo = new Object();
																						fileInfo.name = fileName;
																						fileInfo.data = blobData;
																						fileLi.push(fileInfo);
																						bodySize = bodySize + blobData.size;
																						EntryIndex++;
																						readSingleFile();
																    				});
																			}
																		});
																	}
														
																	function createZipWriter() {
														                   zip.createWriter(writer, function(writer) {
																			zipWriter = writer;
																			nextFile();
																		}, onerror);
																	}
																	writer = new zip.Data64URIWriter();
																	createZipWriter();
																}
																else
																{
																	var fileInfo = new Object();
																	fileInfo.name = fileName;
																	fileInfo.data = blobData;
																	fileLi.push(fileInfo);
																	bodySize = bodySize + blobData.size;
																	EntryIndex++;
																	readSingleFile();
																}
													    	});	
													    }
													    else
													    {
													    	if(fileLi.length > 0)
													    	{
																	var addIndex = 0;
																	function nextFile() 
																	{
																		var file = fileLi[addIndex];
																			zipWriter.add(file.name, new zip.BlobReader(file.data), function() {
																			addIndex++;
																			if(addIndex < fileLi.length)
																				nextFile();
																			else
																			{
																				zipWriter.close(function(base64Data) {
																    					base64Data = base64Data.slice(base64Data.indexOf(';base64,') + 8);
																    					bodySize = 0;
																						fileLi = [];
																						backupObjectList.push({ParentId: deploymentLogId,Name : ROLL_BACK_ZIP_DESCRIPTION,Description:ROLL_BACK_ZIP_DESCRIPTION,Body:base64Data,ContentType : ROLL_BACK_FILE_TYPE});
																						backupSingleFileSaver();
																    				});
																			}
																		});
																	}
														
																	function createZipWriter() {
														                   zip.createWriter(writer, function(writer) {
																			zipWriter = writer;
																			nextFile();
																		}, onerror);
																	}
																	writer = new zip.Data64URIWriter();
																	createZipWriter();
													    	}
													    	else
													    	{
																backupSingleFileSaver();
													    	}
													    }
													}
													readSingleFile();
												}
												else
												{
													console.log('!entries.length');
												}
											});
									}, function(error) {
									  // onerror callback
										if(error.message != undefined)
										{
											showMessage(error.message);
										}
										else
										{
											showMessage('Unknown error.');
										}
									});
								}
							}
							else
							{
								startDeployment();
							}
						}
						else
						{
							UnknownErrorInDeploy.push(result.errorMessage);
               				finishDeployment();
						}
               		}
               		else
               		{
               			var AsyncId = result.id;
               			var remainingTime = 10;
	        			var timeCounter = function(){
	        				if(remainingTime > 0)
	        				{
								$(".messageText").text("Backup Retrieval status check is scheduled after "+remainingTime+" seconds.");
	                            setTimeout(timeCounter, 1000);
	                            remainingTime--;
	        				}
	        				else
	        				{
	        					checkRetrieveStatus(AsyncId);
	        				}
	        			}
	        			timeCounter();
               		}
               	}
               	else
               	{
               		UnknownErrorInDeploy.push('Unknown error while getting backup of target org.');
               		finishDeployment();
               	}
            }
        }
        
        function onerror(message) {
			if(message.message != undefined)
			{
				showMessage(message.message);
			}
			else
			{
				showMessage('Unknown error.');
			}
		}
        
        function backupSingleFileSaver()
		{
			if(backupObjectList.length > 0)
			{
				$(".messageText").text("Saving backup file...");
				var attObj = backupObjectList[0];
				var selfConn = new flosumsf.Connection({ accessToken: '{!$API.Session_Id}' });
				selfConn.sobject('Attachment').create(attObj,function(err, result){
					if(err)
					{
						showMessage(err.errorCode);
					}
					else
					{
						backupSingleFileSaver();
					}
				});
				backupObjectList.shift();
			}
			else
			{
				startDeployment();
			}
		}
        
        //Save backup zip for rollback
        function saveBackupZip(attParentId,NameOfAtt,attDescription,base64data,fileType)
        {
        	$(".messageText").text("Saving backup file...");
        	
        	var selfConn = new flosumsf.Connection({ accessToken: '{!$API.Session_Id}' });
	        	selfConn.sobject('Attachment').create({ 
	                ParentId: attParentId,
	                Name : NameOfAtt,
	                Body: base64data,
	                ContentType : fileType, 
	                Description :  attDescription,
	            },attachmentSaveHandler);
        }
        
        function attachmentSaveHandler(err, ret)
        {
        	if (err || !ret.success) 
           	{ 
           		console.error(err, ret); 
           		//start deployment
           		startDeployment();
           	}
           	else
           	{
           		//start deployment
				startDeployment();
           	}
        }
        
        function startDeployment()
        {
        	console.log('Start Deployment.');
        	deployRecentValidation();
        }
        
        function getRetrieveRequest(retrieveMap)
        {
        	var retrieveRequest = new Object();
        	retrieveRequest.apiVersion = apiVersion;
        	retrieveRequest.singlePackage = true;
        	retrieveRequest.unpackaged = {};
        	retrieveRequest.unpackaged.types = [];
        	for(var metaType in retrieveMap)
        	{
        		var oneType = {};
        		oneType.name = metaType;
        		oneType.members = [];
        		var li = retrieveMap[metaType];
        		for(var index in li)
        		{
        			if(index< li.length)
        			{
        				oneType.members.push(li[index]);
        			}
        		}
        		retrieveRequest.unpackaged.types.push(oneType);
        	}
        	return retrieveRequest;
        }
        
        function stringToBase64Encode(str)
       	{
       		return window.btoa(unescape(encodeURIComponent(str)));
       	}
		
		//To create connection
		function createConnection(accessToken,refreshToken,instanceUrl)
		{
			return new flosumsf.Connection({
			  oauth2 : {
			    clientId : '{!cred.ConsumerKey__c}',
			    clientSecret : '{!cred.ConsumerSecret__c}',
			    redirectUri : '{!cred.Redirect_URL__c}'
			  },
			  accessToken : accessToken,
              proxyUrl: "/services/proxy",
              //logLevel: "DEBUG",
			  refreshToken : refreshToken,
			  maxRequest: 100000,
			  serverUrl: instanceUrl});
		}
	</script>
</apex:page>