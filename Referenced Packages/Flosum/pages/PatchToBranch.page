<apex:page standardController="Flosum__Patch__c" extensions="Flosum.PatchToBranchExtension" sidebar="false">
	<c:TrackPanel />
	<c:Wait />
	<c:DynamicLookupScript />
	<apex:includeScript value="{!URLFOR($Resource.Flosum__jszipmaster, 'jszip-master/dist/jszip.js')}"/>
	<apex:includeScript value="{!$Resource.Flosum__xmltojson}"/>
	<apex:includeScript value="{!$Resource.Flosum__X2JS}"/>
	<apex:includeScript value="{!URLFOR($Resource.Flosum__ContentEditor, 'beauty/forMatXML.js')}"/>
	<apex:form >
		<apex:actionfunction action="{!showMessage}" reRender="CTPmg" name="CPT_showMessage" onComplete="hide();">
			<apex:param assignTo="{!CPT_Message}" value="" name="newstr"/>
		</apex:actionfunction>
		<apex:actionfunction name="redirectToBranch" action="{!redirectToBranch}" />
		<apex:actionFunction name="refreshOnBranchSelect" reRender="tbl,CTPmg" oncomplete="hide();" />
		<apex:sectionHeader title="{!$Label.flosum__commit_to_branch_title}"/>
		<apex:pagemessages id="CTPmg"/>
		<apex:pageBlock id="tbl">
			<apex:pageblockSection columns="1" id="transfertobranch">
				<apex:pageBlockSectionItem >
            		<apex:outputLabel value="{!$ObjectType.Flosum__Patch__c.fields.Name.Label}" />
            		<apex:outputField value="{!Flosum__Patch__c.Name}"/>
            	</apex:pageBlockSectionItem>
				<apex:pageblocksectionItem >
					<apex:outputLabel value="{!$ObjectType.Flosum__Repository__c.Label}"/>
					<apex:selectList value="{!selectedRepository}" multiselect="false" size="1">
						<apex:selectOptions value="{!repositoryOptions}"/>
						<apex:actionSupport event="onchange" action="{!checkRepositoryPermission}" reRender="tbl,CTPmg" oncomplete="hide();" onsubmit="show();"/>
			        </apex:selectList>
			    </apex:pageblocksectionItem>
			    <apex:pageblocksectionItem rendered="{!isCommitPermission}">
					<apex:outputLabel value="{!$Label.flosum__commit_to_branch_label}"/>
					<apex:outputPanel >
			            <apex:inputHidden id="branchTargetId" value="{!commitTo}"/>
			            <apex:inputText size="25" value="{!commitToLabel}" id="branchTargetName" onFocus="this.blur()" disabled="false"  html-callitafterchange="refreshOnBranchSelect"/>           
		  		    	<img src="/s.gif"
			            onclick="dlm_openLookupPopup('{!$Component.branchTargetName}','{!$Component.branchTargetId}','{!$ObjectType.Branch__c.Name}',
			            '{!$ObjectType.Branch__c.fields.Repository__c.Name} =\'{!selectedRepository}\''); return false" 
			            class="lookupIcon"
			            onmouseout="this.className='lookupIcon';" 
			            alt="Patch Name Lookup (New Window)" 
			            onmouseover="this.className='lookupIconOn';"/>
		  		    </apex:outputPanel>
			    </apex:pageblocksectionItem>
			    <apex:pageblocksectionItem rendered="{!isCommitPermission && (commitTo == '' || commitTo == null)}">
					<apex:outputLabel value="Branch Name"/>
					<apex:inputText value="{!newBranchName}"/>
			    </apex:pageblocksectionItem>
		    </apex:pageblockSection>
		    <apex:pageBlockButtons >
				<apex:commandButton value="Transfer To Branch" action="{!goToCommit}" rendered="{!isCommitPermission}" reRender="CTPmg,tbl" onClick="show();" oncomplete="startCommitToBranch('{!JSENCODE(patchId)}', '{!JSENCODE(branchId)}');" />
            </apex:pageBlockButtons>
	    </apex:pageBlock>
	</apex:form>
	<script>
		
		var mmap = new Object();
	    mmap['CustomField'] = true;
	    mmap['CustomLabel'] = true;
	    mmap['CompactLayout'] = true;
	    mmap['WebLink'] = true;
	    mmap['RecordType'] = true;
	    mmap['ListView'] = true;
	    mmap['FieldSet'] = true;
	    mmap['AssignmentRule'] = true;
	    mmap['AutoResponseRule'] = true;
	    mmap['ValidationRule'] = true;
	    mmap['WorkflowTask'] = true;
		mmap['WorkflowOutboundMessage'] = true;
		mmap['WorkflowFieldUpdate'] = true;
		mmap['WorkflowKnowledgePublish'] = true;
		mmap['WorkflowAlert'] = true;
		mmap['WorkflowRule'] = true;
		
		mmap['SharingOwnerRule'] = true;
		mmap['SharingCriteriaRule'] = true;
		mmap['BusinessProcess'] = true;
		mmap['SharingReason'] = true;
		mmap['EscalationRule'] = true;
		mmap['MatchingRule'] = true;
		mmap['ManagedTopic'] = true;
		
		var folderMap = new Object();
		folderMap['DocumentFolder'] = 'Document';
		folderMap['DashboardFolder'] = 'Dashboard';
		folderMap['ReportFolder'] = 'Report';
		folderMap['EmailFolder'] = 'EmailTemplate';
		
		var bundleTypes = {};
    	bundleTypes['AuraDefinitionBundle'] = 'AuraDefinitionBundle';
		
		Visualforce.remoting.timeout = 120000;
		var patchId;
		var branchId;
		var patchManifestCrcMap = {};
		var patchManifestItemDetailMap = {};
		
		var commitToBranchLimitList = [];
		var commitToBranchCRCMap = {};
		var commitToBranchBodyLength = 0;
		var commitToBranchCount = 0;
		var commitToBranchIndex = 0;
		
		var CTP_attList = [];
		var CTP_readAttachmentIndex = 0;
		var messageDots = '.';
		var normalZip = new JSZip();
	
		function startCommitToBranch(tempPatchId, tempBranchId)
		{
			console.log('patchId-'+tempPatchId);
			console.log('branchId-'+tempBranchId);
			CTP_attList = [];
			patchId = '';
			branchId = '';
			CTP_readAttachmentIndex = 0;
			patchManifestCrcMap = {};
			patchManifestItemDetailMap = {};
			commitToBranchLimitList = [];
			commitToBranchCRCMap = {};
			commitToBranchBodyLength = 0;
			commitToBranchCount = 0;
			
			if(tempPatchId != '' && tempBranchId != '')
			{
				patchId = tempPatchId;
				branchId = tempBranchId;
				Visualforce.remoting.Manager.invokeAction(
			        '{!$RemoteAction.PatchToBranchExtension.getInformationToCommit}',
			        patchId,
			        branchId,
			        CTP_handleCommitInformation
			    );
			}
			else
			{
				hide();
			}
		}
		
		function CTP_handleCommitInformation(r,e)
		{
		    if(e.status && r) 
		    {
		    	if(r.length > 0)
				{
					CTP_attList = [];
					var bodySize = 0;
					var temp = [];
					for(var i in r)
					{
						if(i< r.length)
						{
							var pMainfest = r[i];
							if(((bodySize + pMainfest.bodyLength) > 2000000 || temp.length > 1500) && temp.length > 0) 
							{
								CTP_attList.push(temp);
								bodySize = 0;
								temp = [];
							}
							bodySize = bodySize + pMainfest.bodyLength;
							temp.push(pMainfest.attId);
							patchManifestItemDetailMap[pMainfest.pmId] = pMainfest;
						}
					}
					if(temp.length > 0)
					{
						CTP_attList.push(temp);
					}
					if(CTP_attList.length > 0)
					{
						CTP_readAttachmentIndex = 0;
						CTP_getAttachments();
					}
					else
					{
						CTP_showMessage('The definition of some of these components may have been deleted.');
					}
				}
				else
				{
					CTP_showMessage('Components not found.');
				}
		    }
		    else
		    {
		    	CTP_showMessage(e.message);
		    }
		}
		
		function CTP_getAttachments()
		{
			if(CTP_readAttachmentIndex < CTP_attList.length)
			{
				var attSet = CTP_attList[CTP_readAttachmentIndex];
				console.log('Read Content: '+(CTP_readAttachmentIndex+1)+'/'+CTP_attList.length);
				CTP_showInfoMessage('Moving components to branch' + messageDots);
				if(messageDots.length >= 6)
                    messageDots = '.';
                else
                    messageDots +='.';
				Visualforce.remoting.Manager.invokeAction(
			        '{!$RemoteAction.PatchToBranchExtension.getAttachments}',
			        JSON.stringify(attSet),
			        CTP_handleAttachments
			    );
			}
			else
			{
				if(!isMapEmpty(commitToBranchCRCMap))
				{
					commitToBranchLimitList.push(commitToBranchCRCMap);
				}
				//all attachment collected succesfully.
				console.log('All Content Retrieved.');
				//Commit to branch
				if(commitToBranchLimitList.length > 0)
					commitInChunks();
				else
					console.log('No Component found to commit');
			}
		}
				
		function commitInChunks()
		{
			if(commitToBranchIndex < commitToBranchLimitList.length)
			{
				var commitObj = commitToBranchLimitList[commitToBranchIndex];
				Visualforce.remoting.Manager.invokeAction(
			        '{!$RemoteAction.PatchToBranchExtension.commitToBranch}',
			        branchId,
			        JSON.stringify(commitObj),
			        handleCommitRecords
			    );
			}
			else
			{
				//redirect to branch.
				redirectToBranch();
			}
		}
				
		function handleCommitRecords(r,e)
		{
			if(e.status) 
		    {
		    	commitToBranchIndex++;
		    	commitInChunks();
		    }
		    else
		    {
		    	CTP_showMessage(e.message);
		    }
	    }
		
		function CTP_handleAttachments(r,e)
		{
			if(e.status && r) 
		    {
		    	var attReadIndex = 0;
	    		var readFullAtt = function(){
	    			if(attReadIndex < r.length)
	    			{
	    				var att = r[attReadIndex];
						var parentId = att.parentId;
			    		var metaType = att.compType;
			    		var base64str = att.base64;
			    		CTP_showInfoMessage('Moving components to branch' +messageDots);
						if(messageDots.length >= 6)
		                    messageDots = '.';
		                else
		                    messageDots +='.';
		                //patchManifestCrcMap = {};
		                var zip = new JSZip(base64str, {base64:true});
                        createFileMap(metaType,zip);
                        if(patchManifestItemDetailMap[parentId] != undefined)
			    		{
			    			var meta = patchManifestItemDetailMap[parentId];							
							var key = '';
							var isFound = false;
							if(mmap[meta.MetaType] == undefined)
							{
								key = meta.MetaType + "#" + meta.File_Name;
							}
							else
							{
								key = meta.MetaType + "#" + meta.API_Name;
							}
							
							if(patchManifestCrcMap[key] != undefined)
							{
								meta.crc32 = ''+patchManifestCrcMap[key].crc32;
                                if(patchManifestCrcMap[key+"-meta.xml"] != undefined)
								{
									meta.crc32 = meta.crc32+' '+patchManifestCrcMap[key+"-meta.xml"].crc32;
								}
								isFound = true;
							}
							else if(bundleTypes[meta.MetaType] != undefined)
							{
								var bundleArr = [];
								meta.crc32 = '';
								for(var mapKey in patchManifestCrcMap)
								{
									if(mapKey != undefined && mapKey.indexOf(key+'/') == 0)
									{
										var descriptor = {};
										var fName = mapKey.replace(meta.MetaType+"#",'');
										descriptor.fileName = fName;
										descriptor.crc32 = patchManifestCrcMap[mapKey].crc32;
										bundleArr.push(descriptor);
										isFound = true;
									}
								}
								if(bundleArr.length > 0)
									meta.crc32 = composeBundleCrc(bundleArr);
							}
							if(isFound && meta.crc32 != undefined && meta.crc32 != '')
							{
								if(((commitToBranchBodyLength + meta.bodyLength) > 2000000 || commitToBranchCount > 1500) && !isMapEmpty(commitToBranchCRCMap))
								{
									commitToBranchLimitList.push(commitToBranchCRCMap);
									commitToBranchCRCMap = {};
									commitToBranchBodyLength = 0;
									commitToBranchCount = 0;
								}
								commitToBranchCRCMap[meta.pmId] = meta.crc32;
								commitToBranchBodyLength = commitToBranchBodyLength + meta.bodyLength;
								commitToBranchCount++;
							}
							else
							{
								console.log('Crc not found for');
								console.log(meta);
							}
			    		}
			    		else
			    		{
			    			console.log('Crc detail not found.');
			    		}
			    		attReadIndex++;
						readFullAtt();
	    			}
	    			else
	    			{
						//attachment found.
						CTP_readAttachmentIndex++;
						CTP_getAttachments();
	    			}
	    		}
	    		readFullAtt();
		    }
		    else
		    {
		    	CTP_showMessage(e.message);
		    }
		}
						
		function isMapEmpty(jsObj)
		{
			for(var varName in jsObj)
			{
				return false;
			}
			return true;
		}
		
		function createFileMap(tempComponentType,tempZip)
		{
			if(tempComponentType == 'Profile' || tempComponentType == 'PermissionSet')
			{
				for(var fileName in tempZip.files)
				{
					if(fileName != undefined)
					{
	            		var fileData = tempZip.files[fileName].asBinary();
	            		patchManifestCrcMap[tempComponentType+"#"+fileName] = getCrcWithData(fileData,{compress:true});
            		}
				}
			}
			else if(mmap[tempComponentType] == undefined)
	    	{ 
     			for(var fileName in tempZip.files)
				{
					if(fileName != undefined && fileName.charAt(fileName.length - 1) != '/' && fileName != 'package.xml' && fileName != 'undefined') 
	            	{
	            		var fileData = tempZip.files[fileName].asBinary();
	            		patchManifestCrcMap[tempComponentType+"#"+fileName] = getCrcWithData(fileData);
	            	}
				}
	   		}
	   		else
	   		{
     			for(var fileName in tempZip.files)
				{
					if(fileName != undefined && fileName.charAt(fileName.length - 1) != '/' && fileName != 'package.xml' && fileName != 'undefined') 
	            	{
	            		getChildFileMap(tempComponentType,tempZip.files[fileName].asText(),fileName);
	            	}
				}
			}
		}
		
		/*const XML_HEADER = '<?xml version="1.0" encoding="UTF-8"?>';
		function getCrcWithData(zipData,isInnerType)
		{
			var r = new Object();
			if (zipData != undefined && isInnerType === true){
				zipData = vkbeautify.xml(zipData);
			}
			r.crc32 = normalZip.crc32(zipData,32);
			//r.data = zipData;
			return r;
		}*/
		
		const XML_HEADER = '<?xml version="1.0" encoding="UTF-8"?>';
		function getCrcWithData(zipData,flags)
		{
			var r = new Object();
			if (zipData != undefined && flags != undefined && flags.isInnerType == true){
				zipData = vkbeautify.xml(zipData);
			}
			r.crc32 = normalZip.crc32(zipData,32);
			return r;
		}
		
		// analyse and return bundle's crc32 sum (see the specs for detail)
		function composeBundleCrc(bundleComponentStack) {
			var mapComp = {'.cmp':'','.cmp-meta.xml':'' ,'Controller.js':'','Helper.js':'','.css':'','.auradoc':'','Renderer.js':'','.design':'','.svg':''};
            var crcCode = '';
                                                                
			for (var i = 0; i < bundleComponentStack.length; i++){
                 var zipFileName = bundleComponentStack[i].fileName;
                 if(zipFileName != undefined)
                 {
          			var index = getBundleExt(zipFileName);
                    if (index > -1){
        	          	var ext = zipFileName.substr(index)
    	                mapComp[ext] = bundleComponentStack[i].crc32;
                    }
                 }
             }
             crcCode = mapComp['.cmp']+','+mapComp['.cmp-meta.xml']+ ','+mapComp['Controller.js']+','+mapComp['Helper.js']+
                                      ','+mapComp['.css']+','+mapComp['.auradoc']+','+mapComp['Renderer.js']+','+mapComp['.design']+','+mapComp['.svg'];
             return crcCode;
		}
		
		function getBundleExt(str) {
        	var index = str.lastIndexOf('.js');
        	if (index > -1){// verify 3 exts
        		index = str.lastIndexOf('Controller.js');
        		if (index == -1){
	        		index = str.lastIndexOf('Helper.js');
			   		if (index == -1){
	        			index = str.lastIndexOf('Renderer.js');
       				}
        		}
        		return index;
        	}
        	index = str.lastIndexOf('.cmp-meta.xml');
        	if (index == -1){
        		return str.lastIndexOf('.');
        	}
        	return index;
        }
		
		function getChildFileMap(metaType,xml,fileName)
		{
			var fullName = '';
			if(metaType != 'CustomLabel')
			{
				fullName = fileName.slice(fileName.indexOf("/")+1,fileName.lastIndexOf('.'))+".";
			}
	
	   		var x2js = new X2JS({useDoubleQuotes : true, stripWhitespaces : false});
	   		var jsnMap ={};
			var tempJSON = '';
			var srcjson = x2js.xml_str2json(xml);
			if(srcjson != undefined && srcjson != null)
			{
				var srcitems;
				if(metaType == 'CustomLabel')
				{
					var srcMetaItem = srcjson.CustomLabels;
					srcitems = srcMetaItem.labels;
				}
				else if(metaType == 'CustomField')
				{
					var srcMetaItem = srcjson.CustomObject;
					srcitems = srcMetaItem.fields;
				}
				else if(metaType == 'ListView')
				{
					var srcMetaItem = srcjson.CustomObject;
					srcitems = srcMetaItem.listViews;
				}
				else if(metaType == 'CompactLayout')
				{
					var srcMetaItem = srcjson.CustomObject;
					srcitems = srcMetaItem.compactLayouts;
				}
				else if(metaType == 'WebLink')
				{
					var srcMetaItem = srcjson.CustomObject;
					srcitems = srcMetaItem.webLinks;
				}
				else if(metaType == 'RecordType')
				{
					var srcMetaItem = srcjson.CustomObject;
					srcitems = srcMetaItem.recordTypes;
				}
				else if(metaType == 'FieldSet')
				{
					var srcMetaItem = srcjson.CustomObject;
					srcitems = srcMetaItem.fieldSets;
				}
				else if(metaType == 'ValidationRule')
				{
					var srcMetaItem = srcjson.CustomObject;
					srcitems = srcMetaItem.validationRules;
				}
				else if(metaType == 'AssignmentRule')
				{
					var srcMetaItem = srcjson.AssignmentRules;
					srcitems = srcMetaItem.assignmentRule;
				}
				else if(metaType == 'AutoResponseRule')
				{
					var srcMetaItem = srcjson.AutoResponseRules;
					srcitems = srcMetaItem.autoResponseRule;
				}
				else if(metaType == 'WorkflowTask')
				{
					var srcMetaItem = srcjson.Workflow;
					srcitems = srcMetaItem.tasks;
				}
				else if(metaType == 'WorkflowOutboundMessage')
				{
					var srcMetaItem = srcjson.Workflow;
					srcitems = srcMetaItem.outboundMessages;
				}
				else if(metaType == 'WorkflowFieldUpdate')
				{
					var srcMetaItem = srcjson.Workflow;
					srcitems = srcMetaItem.fieldUpdates;
				}
				else if(metaType == 'WorkflowKnowledgePublish')
				{
					var srcMetaItem = srcjson.Workflow;
					srcitems = srcMetaItem.knowledgePublishes;
				}
				else if(metaType == 'WorkflowAlert')
				{
					var srcMetaItem = srcjson.Workflow;
					srcitems = srcMetaItem.alerts;
				}
				else if( metaType == 'WorkflowRule')
				{
					var srcMetaItem = srcjson.Workflow;
					srcitems = srcMetaItem.rules;
				}
				else if(metaType == 'SharingCriteriaRule')
				{
					var srcMetaItem = srcjson.SharingRules;
					srcitems = srcMetaItem.sharingCriteriaRules;
				}
				else if(metaType == 'SharingOwnerRule')
				{
					var srcMetaItem = srcjson.SharingRules;
					srcitems = srcMetaItem.sharingOwnerRules;
				}
				else if(metaType == 'BusinessProcess')
				{
					var srcMetaItem = srcjson.CustomObject;
					srcitems = srcMetaItem.businessProcesses;
				}
				else if(metaType == 'SharingReason')
				{
					var srcMetaItem = srcjson.CustomObject;
					srcitems = srcMetaItem.sharingReasons;
				}
				else if(metaType == 'EscalationRule')
				{
					var srcMetaItem = srcjson.EscalationRules;
					srcitems = srcMetaItem.escalationRule;
				}
				else if(metaType == 'MatchingRule')    
				{
					var srcMetaItem = srcjson.MatchingRules;
					srcitems = srcMetaItem.matchingRules;
				}
				else if(metaType == 'ManagedTopic')
				{
					var srcMetaItem = srcjson.ManagedTopics;
					srcitems = srcMetaItem.ManagedTopic;
				}
				if(srcitems != undefined)
				{
					if(srcitems.fullName == undefined)
				    {	
				    	for(var i in srcitems)	
				    	{
				    		if(i < srcitems.length)
				    		{
				    			var v = srcitems[i];
				    			jsnMap[v.fullName]= JSON.stringify(v);
				    		}
				    	}	    	 
				    }
				    else
				    {
					    jsnMap[srcitems.fullName] = JSON.stringify(srcitems);
				    }
			    }
			}
			for(var name in jsnMap)
			{
				var tempXml = '';
				var tempJSON = jsnMap[name];
				if(tempJSON != undefined)
				{
					//header
					if(metaType == 'CustomLabel')
					{
						tempXml = '<?xml version="1.0" encoding="UTF-8"?><CustomLabels xmlns="http://soap.sforce.com/2006/04/metadata">';
					}
					else if(metaType == 'AssignmentRule' )
					{
						tempXml = '<?xml version="1.0" encoding="UTF-8"?><AssignmentRules xmlns="http://soap.sforce.com/2006/04/metadata">';
					}
					else if(metaType == 'AutoResponseRule')
					{
						tempXml = '<?xml version="1.0" encoding="UTF-8"?><AutoResponseRules xmlns="http://soap.sforce.com/2006/04/metadata">';
					}
					else if(metaType == 'WorkflowAlert' || metaType == 'WorkflowFieldUpdate'|| metaType == 'WorkflowOutboundMessage'|| metaType == 'WorkflowTask' || metaType == 'WorkflowRule' || metaType == 'WorkflowKnowledgePublish')
					{
						tempXml = '<?xml version="1.0" encoding="UTF-8"?><Workflow xmlns="http://soap.sforce.com/2006/04/metadata">';
					}
					else if(metaType == 'SharingCriteriaRule' || metaType == 'SharingOwnerRule')
					{
						tempXml = '<?xml version="1.0" encoding="UTF-8"?><SharingRules xmlns="http://soap.sforce.com/2006/04/metadata">';
					}
					else if(metaType == 'EscalationRule')
					{
						tempXml = '<?xml version="1.0" encoding="UTF-8"?><EscalationRules xmlns="http://soap.sforce.com/2006/04/metadata">';
					}
					else if(metaType == 'MatchingRule')
					{
						tempXml = '<?xml version="1.0" encoding="UTF-8"?><MatchingRules xmlns="http://soap.sforce.com/2006/04/metadata">';
					}
					else if(metaType == 'ManagedTopic')
					{
						tempXml = '<?xml version="1.0" encoding="UTF-8"?><ManagedTopics xmlns="http://soap.sforce.com/2006/04/metadata">';
					}
					else
					{
						tempXml = '<?xml version="1.0" encoding="UTF-8"?><CustomObject xmlns="http://soap.sforce.com/2006/04/metadata">';
					}
					
					//body
					if(metaType == 'CustomLabel')
					{
						tempXml = tempXml +'<labels>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</labels>';
					}
					else if(metaType == 'CustomField')
					{
						tempXml = tempXml +'<fields>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</fields>';
					}
					else if(metaType == 'ListView')
					{
						tempXml = tempXml +'<listViews>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</listViews>';
					}
					else if(metaType == 'CompactLayout')
					{
						tempXml = tempXml +'<compactLayouts>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</compactLayouts>';
					}
					else if(metaType == 'WebLink')
					{
						tempXml = tempXml +'<webLinks>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</webLinks>';
					}
					else if(metaType == 'RecordType')
					{
						tempXml = tempXml +'<recordTypes>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</recordTypes>';
					}
					else if(metaType == 'FieldSet')
					{
						tempXml = tempXml +'<fieldSets>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</fieldSets>';
					}
					else if(metaType == 'ValidationRule')
					{
						tempXml = tempXml +'<validationRules>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</validationRules>';
					}
					else if(metaType == 'AssignmentRule')
					{
						tempXml = tempXml +'<assignmentRule>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</assignmentRule>';
					}
					else if(metaType == 'AutoResponseRule')
					{
						tempXml = tempXml +'<autoResponseRule>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</autoResponseRule>';
					}
					else if(metaType == 'WorkflowAlert')
					{
						tempXml = tempXml +'<alerts>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</alerts>';
					}
					else if(metaType == 'WorkflowFieldUpdate')
					{
						tempXml = tempXml +'<fieldUpdates>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</fieldUpdates>';
					}
					else if(metaType == 'WorkflowKnowledgePublish')
					{
						tempXml = tempXml +'<knowledgePublishes>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</knowledgePublishes>';
					}
					else if(metaType == 'WorkflowOutboundMessage')
					{
						tempXml = tempXml +'<outboundMessages>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</outboundMessages>';
					}
					else if(metaType == 'WorkflowTask')
					{
						tempXml = tempXml +'<tasks>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</tasks>';
					}
					else if(metaType == 'WorkflowRule')
					{
						tempXml = tempXml +'<rules>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</rules>';
					}
					else if(metaType == 'SharingCriteriaRule')
					{
						tempXml = tempXml +'<sharingCriteriaRules>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</sharingCriteriaRules>';
					}
					else if(metaType == 'SharingOwnerRule')
					{
						tempXml = tempXml +'<sharingOwnerRules>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</sharingOwnerRules>';
					}
					else if(metaType == 'EscalationRule')
					{
						tempXml = tempXml +'<escalationRule>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</escalationRule>';
					}
					else if(metaType == 'MatchingRule')
					{
						tempXml = tempXml +'<matchingRules>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</matchingRules>';
					}
					else if(metaType == 'ManagedTopic')
					{
						tempXml = tempXml +'<managedTopic>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</managedTopic>';
					}
					else if(metaType == 'BusinessProcess')
					{
						tempXml = tempXml +'<businessProcesses>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</businessProcesses>';
					}
					else if(metaType == 'SharingReason')
					{
						tempXml = tempXml +'<sharingReasons>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</sharingReasons>';
					}
					
					
					//footer
					if(metaType == 'CustomLabel')
					{
						tempXml = tempXml +'</CustomLabels>';
					}
					else if(metaType == 'AssignmentRule' )
					{
						tempXml = tempXml +'</AssignmentRules>';
					}
					else if(metaType == 'AutoResponseRule')
					{
						tempXml = tempXml +'</AutoResponseRules>';
					}
					else if(metaType == 'WorkflowAlert' || metaType == 'WorkflowFieldUpdate'|| metaType == 'WorkflowOutboundMessage'|| metaType == 'WorkflowTask' || metaType == 'WorkflowRule' || metaType == 'WorkflowKnowledgePublish')
					{
						tempXml = tempXml +'</Workflow>';
					}
					else if(metaType == 'SharingCriteriaRule' || metaType == 'SharingOwnerRule')
					{
						tempXml = tempXml +'</SharingRules>';
					}
					else if(metaType == 'EscalationRule')
					{
						tempXml = tempXml +'</EscalationRules>';
					}
					else if(metaType == 'MatchingRule')
					{
						tempXml = tempXml +'</MatchingRules>';
					}
					else if(metaType == 'ManagedTopic')
					{
						tempXml = tempXml +'</ManagedTopics>';
					}
					else
					{
						tempXml = tempXml +'</CustomObject>';
					}
					//tempXml = unescape(encodeURIComponent(tempXml));
					patchManifestCrcMap[metaType+"#"+fullName+""+name]=	getCrcWithData(tempXml,{isInnerType:true});
				}
			}
		}
		
		function CTP_showInfoMessage(Message_Str)
        {
        	var parentVal = $("[id$='CTPmg']");
			if(parentVal != undefined)
			{
			    parentVal.html('');
			    if(Message_Str != '')
                {
					var childVal = '<span id="j_id0:msg:j_id19:j_id20:0:j_id21">'+
										'<div class="message infoM3" role="alert">'+
											'<table border="0" cellpadding="0" cellspacing="0" class="messageTable" style="padding:0px;margin:0px;">'+
												'<tbody>'+
													'<tr valign="top">'+
														'<td><img alt="INFO" class="msgIcon" src="/s.gif" title="INFO"></td>'+
														'<td class="messageCell">'+
															'<div id="j_id0:msg:j_id19:j_id20:0:j_id21:j_id22:j_id24" class="messageText">'+
																'<span id="j_id0:msg:j_id19:j_id20:0:j_id21:j_id22:j_id25">'+
																	'<h4></h4>'+
																'</span>'+Message_Str+'<br>'+
															'</div>'+
														'</td>'+
													'</tr>'+
													'<tr>'+
														'<td></td>'+
														'<td></td>'+
													'</tr>'+
												'</tbody>'+
											'</table>'+
										'</div>'+
									'</span>';
					parentVal.append(childVal);
				}
			}
        }
		
		var CTP_showMessage = function(msg) {
	    	CPT_showMessage(msg);
	    }
		
	</script>
</apex:page>